Terminals unused in grammar

   END


Grammar

    0 $accept: input $end

    1 input: functions

    2 functions: function functions
    3          | %empty

    4 function: FUNCTION IDENTIFIER SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    5 declarations: declaration SEMICOLON declarations
    6             | %empty

    7 declaration: id COLON assign

    8 id: IDENTIFIER
    9   | IDENTIFIER COMMA id

   10 assign: INTEGER
   11       | ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

   12 statements: statement SEMICOLON statements
   13           | statement SEMICOLON

   14 statement: vars
   15          | ifs
   16          | whiles
   17          | dos
   18          | read
   19          | write
   20          | continue
   21          | return

   22 vars: var ASSIGN expression

   23 ifs: IF bool_expr THEN statements ENDIF
   24    | IF bool_expr THEN statements ELSE statements ENDIF

   25 whiles: WHILE bool_expr BEGINLOOP statements ENDLOOP

   26 dos: DO BEGINLOOP statements ENDLOOP WHILE bool_expr

   27 read: READ var empty

   28 write: WRITE var empty

   29 empty: %empty
   30      | COMMA var empty

   31 continue: CONTINUE

   32 return: RETURN expression

   33 bool_expr: relation_and_expr
   34          | bool_expr OR relation_and_expr

   35 relation_and_expr: relation_expr
   36                  | relation_and_expr AND relation_expr

   37 relation_expr: rexpr
   38              | NOT rexpr

   39 rexpr: expression comp expression
   40      | TRUE
   41      | FALSE
   42      | L_PAREN bool_expr R_PAREN

   43 comp: EQ
   44     | NEQ
   45     | LT
   46     | GT
   47     | LTE
   48     | GTE

   49 expression: mult_expr add_expr

   50 add_expr: ADD mult_expr add_expr
   51         | SUB mult_expr add_expr
   52         | %empty

   53 mult_expr: term multi_term

   54 multi_term: MULT term multi_term
   55           | DIV term multi_term
   56           | MOD term multi_term
   57           | %empty

   58 term: positive_term
   59     | SUB positive_term
   60     | IDENTIFIER term_iden

   61 positive_term: var
   62              | NUMBER
   63              | L_PAREN expression R_PAREN

   64 term_iden: L_PAREN term_ex R_PAREN
   65          | L_PAREN R_PAREN

   66 term_ex: expression
   67        | expression COMMA term_ex

   68 var: IDENTIFIER
   69    | IDENTIFIER L_SQUARE_BRACKET expression R_SQUARE_BRACKET


Terminals, with rules where they appear

$end (0) 0
error (256)
FUNCTION (258) 4
BEGIN_PARAMS (259) 4
END_PARAMS (260) 4
BEGIN_LOCALS (261) 4
END_LOCALS (262) 4
BEGIN_BODY (263) 4
END_BODY (264) 4
INTEGER (265) 10 11
ARRAY (266) 11
OF (267) 11
IF (268) 23 24
THEN (269) 23 24
ENDIF (270) 23 24
ELSE (271) 24
WHILE (272) 25 26
DO (273) 26
BEGINLOOP (274) 25 26
ENDLOOP (275) 25 26
CONTINUE (276) 31
READ (277) 27
WRITE (278) 28
AND (279) 36
OR (280) 34
NOT (281) 38
TRUE (282) 40
FALSE (283) 41
RETURN (284) 32
SEMICOLON (285) 4 5 12 13
COLON (286) 7
COMMA (287) 9 30 67
L_PAREN (288) 42 63 64 65
R_PAREN (289) 42 63 64 65
L_SQUARE_BRACKET (290) 11 69
R_SQUARE_BRACKET (291) 11 69
ASSIGN (292) 22
END (293)
NUMBER (294) 11 62
IDENTIFIER (295) 4 8 9 60 68 69
MULT (296) 54
DIV (297) 55
MOD (298) 56
ADD (299) 50
SUB (300) 51 59
LT (301) 45
LTE (302) 47
GT (303) 46
GTE (304) 48
EQ (305) 43
NEQ (306) 44


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
input (53)
    on left: 1, on right: 0
functions (54)
    on left: 2 3, on right: 1 2
function (55)
    on left: 4, on right: 2
declarations (56)
    on left: 5 6, on right: 4 5
declaration (57)
    on left: 7, on right: 5
id (58)
    on left: 8 9, on right: 7 9
assign (59)
    on left: 10 11, on right: 7
statements (60)
    on left: 12 13, on right: 4 12 23 24 25 26
statement (61)
    on left: 14 15 16 17 18 19 20 21, on right: 12 13
vars (62)
    on left: 22, on right: 14
ifs (63)
    on left: 23 24, on right: 15
whiles (64)
    on left: 25, on right: 16
dos (65)
    on left: 26, on right: 17
read (66)
    on left: 27, on right: 18
write (67)
    on left: 28, on right: 19
empty (68)
    on left: 29 30, on right: 27 28 30
continue (69)
    on left: 31, on right: 20
return (70)
    on left: 32, on right: 21
bool_expr (71)
    on left: 33 34, on right: 23 24 25 26 34 42
relation_and_expr (72)
    on left: 35 36, on right: 33 34 36
relation_expr (73)
    on left: 37 38, on right: 35 36
rexpr (74)
    on left: 39 40 41 42, on right: 37 38
comp (75)
    on left: 43 44 45 46 47 48, on right: 39
expression (76)
    on left: 49, on right: 22 32 39 63 66 67 69
add_expr (77)
    on left: 50 51 52, on right: 49 50 51
mult_expr (78)
    on left: 53, on right: 49 50 51
multi_term (79)
    on left: 54 55 56 57, on right: 53 54 55 56
term (80)
    on left: 58 59 60, on right: 53 54 55 56
positive_term (81)
    on left: 61 62 63, on right: 58 59
term_iden (82)
    on left: 64 65, on right: 60
term_ex (83)
    on left: 66 67, on right: 64 67
var (84)
    on left: 68 69, on right: 22 27 28 30 61


State 0

    0 $accept: . input $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    input      go to state 2
    functions  go to state 3
    function   go to state 4


State 1

    4 function: FUNCTION . IDENTIFIER SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    IDENTIFIER  shift, and go to state 5


State 2

    0 $accept: input . $end

    $end  shift, and go to state 6


State 3

    1 input: functions .

    $default  reduce using rule 1 (input)


State 4

    2 functions: function . functions

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    functions  go to state 7
    function   go to state 4


State 5

    4 function: FUNCTION IDENTIFIER . SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    SEMICOLON  shift, and go to state 8


State 6

    0 $accept: input $end .

    $default  accept


State 7

    2 functions: function functions .

    $default  reduce using rule 2 (functions)


State 8

    4 function: FUNCTION IDENTIFIER SEMICOLON . BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    BEGIN_PARAMS  shift, and go to state 9


State 9

    4 function: FUNCTION IDENTIFIER SEMICOLON BEGIN_PARAMS . declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    IDENTIFIER  shift, and go to state 10

    $default  reduce using rule 6 (declarations)

    declarations  go to state 11
    declaration   go to state 12
    id            go to state 13


State 10

    8 id: IDENTIFIER .
    9   | IDENTIFIER . COMMA id

    COMMA  shift, and go to state 14

    $default  reduce using rule 8 (id)


State 11

    4 function: FUNCTION IDENTIFIER SEMICOLON BEGIN_PARAMS declarations . END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    END_PARAMS  shift, and go to state 15


State 12

    5 declarations: declaration . SEMICOLON declarations

    SEMICOLON  shift, and go to state 16


State 13

    7 declaration: id . COLON assign

    COLON  shift, and go to state 17


State 14

    9 id: IDENTIFIER COMMA . id

    IDENTIFIER  shift, and go to state 10

    id  go to state 18


State 15

    4 function: FUNCTION IDENTIFIER SEMICOLON BEGIN_PARAMS declarations END_PARAMS . BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    BEGIN_LOCALS  shift, and go to state 19


State 16

    5 declarations: declaration SEMICOLON . declarations

    IDENTIFIER  shift, and go to state 10

    $default  reduce using rule 6 (declarations)

    declarations  go to state 20
    declaration   go to state 12
    id            go to state 13


State 17

    7 declaration: id COLON . assign

    INTEGER  shift, and go to state 21
    ARRAY    shift, and go to state 22

    assign  go to state 23


State 18

    9 id: IDENTIFIER COMMA id .

    $default  reduce using rule 9 (id)


State 19

    4 function: FUNCTION IDENTIFIER SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS . declarations END_LOCALS BEGIN_BODY statements END_BODY

    IDENTIFIER  shift, and go to state 10

    $default  reduce using rule 6 (declarations)

    declarations  go to state 24
    declaration   go to state 12
    id            go to state 13


State 20

    5 declarations: declaration SEMICOLON declarations .

    $default  reduce using rule 5 (declarations)


State 21

   10 assign: INTEGER .

    $default  reduce using rule 10 (assign)


State 22

   11 assign: ARRAY . L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    L_SQUARE_BRACKET  shift, and go to state 25


State 23

    7 declaration: id COLON assign .

    $default  reduce using rule 7 (declaration)


State 24

    4 function: FUNCTION IDENTIFIER SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations . END_LOCALS BEGIN_BODY statements END_BODY

    END_LOCALS  shift, and go to state 26


State 25

   11 assign: ARRAY L_SQUARE_BRACKET . NUMBER R_SQUARE_BRACKET OF INTEGER

    NUMBER  shift, and go to state 27


State 26

    4 function: FUNCTION IDENTIFIER SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 28


State 27

   11 assign: ARRAY L_SQUARE_BRACKET NUMBER . R_SQUARE_BRACKET OF INTEGER

    R_SQUARE_BRACKET  shift, and go to state 29


State 28

    4 function: FUNCTION IDENTIFIER SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY . statements END_BODY

    IF          shift, and go to state 30
    WHILE       shift, and go to state 31
    DO          shift, and go to state 32
    CONTINUE    shift, and go to state 33
    READ        shift, and go to state 34
    WRITE       shift, and go to state 35
    RETURN      shift, and go to state 36
    IDENTIFIER  shift, and go to state 37

    statements  go to state 38
    statement   go to state 39
    vars        go to state 40
    ifs         go to state 41
    whiles      go to state 42
    dos         go to state 43
    read        go to state 44
    write       go to state 45
    continue    go to state 46
    return      go to state 47
    var         go to state 48


State 29

   11 assign: ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET . OF INTEGER

    OF  shift, and go to state 49


State 30

   23 ifs: IF . bool_expr THEN statements ENDIF
   24    | IF . bool_expr THEN statements ELSE statements ENDIF

    NOT         shift, and go to state 50
    TRUE        shift, and go to state 51
    FALSE       shift, and go to state 52
    L_PAREN     shift, and go to state 53
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    bool_expr          go to state 57
    relation_and_expr  go to state 58
    relation_expr      go to state 59
    rexpr              go to state 60
    expression         go to state 61
    mult_expr          go to state 62
    term               go to state 63
    positive_term      go to state 64
    var                go to state 65


State 31

   25 whiles: WHILE . bool_expr BEGINLOOP statements ENDLOOP

    NOT         shift, and go to state 50
    TRUE        shift, and go to state 51
    FALSE       shift, and go to state 52
    L_PAREN     shift, and go to state 53
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    bool_expr          go to state 66
    relation_and_expr  go to state 58
    relation_expr      go to state 59
    rexpr              go to state 60
    expression         go to state 61
    mult_expr          go to state 62
    term               go to state 63
    positive_term      go to state 64
    var                go to state 65


State 32

   26 dos: DO . BEGINLOOP statements ENDLOOP WHILE bool_expr

    BEGINLOOP  shift, and go to state 67


State 33

   31 continue: CONTINUE .

    $default  reduce using rule 31 (continue)


State 34

   27 read: READ . var empty

    IDENTIFIER  shift, and go to state 37

    var  go to state 68


State 35

   28 write: WRITE . var empty

    IDENTIFIER  shift, and go to state 37

    var  go to state 69


State 36

   32 return: RETURN . expression

    L_PAREN     shift, and go to state 70
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    expression     go to state 71
    mult_expr      go to state 62
    term           go to state 63
    positive_term  go to state 64
    var            go to state 65


State 37

   68 var: IDENTIFIER .
   69    | IDENTIFIER . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    L_SQUARE_BRACKET  shift, and go to state 72

    $default  reduce using rule 68 (var)


State 38

    4 function: FUNCTION IDENTIFIER SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 73


State 39

   12 statements: statement . SEMICOLON statements
   13           | statement . SEMICOLON

    SEMICOLON  shift, and go to state 74


State 40

   14 statement: vars .

    $default  reduce using rule 14 (statement)


State 41

   15 statement: ifs .

    $default  reduce using rule 15 (statement)


State 42

   16 statement: whiles .

    $default  reduce using rule 16 (statement)


State 43

   17 statement: dos .

    $default  reduce using rule 17 (statement)


State 44

   18 statement: read .

    $default  reduce using rule 18 (statement)


State 45

   19 statement: write .

    $default  reduce using rule 19 (statement)


State 46

   20 statement: continue .

    $default  reduce using rule 20 (statement)


State 47

   21 statement: return .

    $default  reduce using rule 21 (statement)


State 48

   22 vars: var . ASSIGN expression

    ASSIGN  shift, and go to state 75


State 49

   11 assign: ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 76


State 50

   38 relation_expr: NOT . rexpr

    TRUE        shift, and go to state 51
    FALSE       shift, and go to state 52
    L_PAREN     shift, and go to state 53
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    rexpr          go to state 77
    expression     go to state 61
    mult_expr      go to state 62
    term           go to state 63
    positive_term  go to state 64
    var            go to state 65


State 51

   40 rexpr: TRUE .

    $default  reduce using rule 40 (rexpr)


State 52

   41 rexpr: FALSE .

    $default  reduce using rule 41 (rexpr)


State 53

   42 rexpr: L_PAREN . bool_expr R_PAREN
   63 positive_term: L_PAREN . expression R_PAREN

    NOT         shift, and go to state 50
    TRUE        shift, and go to state 51
    FALSE       shift, and go to state 52
    L_PAREN     shift, and go to state 53
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    bool_expr          go to state 78
    relation_and_expr  go to state 58
    relation_expr      go to state 59
    rexpr              go to state 60
    expression         go to state 79
    mult_expr          go to state 62
    term               go to state 63
    positive_term      go to state 64
    var                go to state 65


State 54

   62 positive_term: NUMBER .

    $default  reduce using rule 62 (positive_term)


State 55

   60 term: IDENTIFIER . term_iden
   68 var: IDENTIFIER .
   69    | IDENTIFIER . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    L_PAREN           shift, and go to state 80
    L_SQUARE_BRACKET  shift, and go to state 72

    $default  reduce using rule 68 (var)

    term_iden  go to state 81


State 56

   59 term: SUB . positive_term

    L_PAREN     shift, and go to state 70
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 37

    positive_term  go to state 82
    var            go to state 65


State 57

   23 ifs: IF bool_expr . THEN statements ENDIF
   24    | IF bool_expr . THEN statements ELSE statements ENDIF
   34 bool_expr: bool_expr . OR relation_and_expr

    THEN  shift, and go to state 83
    OR    shift, and go to state 84


State 58

   33 bool_expr: relation_and_expr .
   36 relation_and_expr: relation_and_expr . AND relation_expr

    AND  shift, and go to state 85

    $default  reduce using rule 33 (bool_expr)


State 59

   35 relation_and_expr: relation_expr .

    $default  reduce using rule 35 (relation_and_expr)


State 60

   37 relation_expr: rexpr .

    $default  reduce using rule 37 (relation_expr)


State 61

   39 rexpr: expression . comp expression

    LT   shift, and go to state 86
    LTE  shift, and go to state 87
    GT   shift, and go to state 88
    GTE  shift, and go to state 89
    EQ   shift, and go to state 90
    NEQ  shift, and go to state 91

    comp  go to state 92


State 62

   49 expression: mult_expr . add_expr

    ADD  shift, and go to state 93
    SUB  shift, and go to state 94

    $default  reduce using rule 52 (add_expr)

    add_expr  go to state 95


State 63

   53 mult_expr: term . multi_term

    MULT  shift, and go to state 96
    DIV   shift, and go to state 97
    MOD   shift, and go to state 98

    $default  reduce using rule 57 (multi_term)

    multi_term  go to state 99


State 64

   58 term: positive_term .

    $default  reduce using rule 58 (term)


State 65

   61 positive_term: var .

    $default  reduce using rule 61 (positive_term)


State 66

   25 whiles: WHILE bool_expr . BEGINLOOP statements ENDLOOP
   34 bool_expr: bool_expr . OR relation_and_expr

    BEGINLOOP  shift, and go to state 100
    OR         shift, and go to state 84


State 67

   26 dos: DO BEGINLOOP . statements ENDLOOP WHILE bool_expr

    IF          shift, and go to state 30
    WHILE       shift, and go to state 31
    DO          shift, and go to state 32
    CONTINUE    shift, and go to state 33
    READ        shift, and go to state 34
    WRITE       shift, and go to state 35
    RETURN      shift, and go to state 36
    IDENTIFIER  shift, and go to state 37

    statements  go to state 101
    statement   go to state 39
    vars        go to state 40
    ifs         go to state 41
    whiles      go to state 42
    dos         go to state 43
    read        go to state 44
    write       go to state 45
    continue    go to state 46
    return      go to state 47
    var         go to state 48


State 68

   27 read: READ var . empty

    COMMA  shift, and go to state 102

    $default  reduce using rule 29 (empty)

    empty  go to state 103


State 69

   28 write: WRITE var . empty

    COMMA  shift, and go to state 102

    $default  reduce using rule 29 (empty)

    empty  go to state 104


State 70

   63 positive_term: L_PAREN . expression R_PAREN

    L_PAREN     shift, and go to state 70
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    expression     go to state 105
    mult_expr      go to state 62
    term           go to state 63
    positive_term  go to state 64
    var            go to state 65


State 71

   32 return: RETURN expression .

    $default  reduce using rule 32 (return)


State 72

   69 var: IDENTIFIER L_SQUARE_BRACKET . expression R_SQUARE_BRACKET

    L_PAREN     shift, and go to state 70
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    expression     go to state 106
    mult_expr      go to state 62
    term           go to state 63
    positive_term  go to state 64
    var            go to state 65


State 73

    4 function: FUNCTION IDENTIFIER SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY .

    $default  reduce using rule 4 (function)


State 74

   12 statements: statement SEMICOLON . statements
   13           | statement SEMICOLON .

    IF          shift, and go to state 30
    WHILE       shift, and go to state 31
    DO          shift, and go to state 32
    CONTINUE    shift, and go to state 33
    READ        shift, and go to state 34
    WRITE       shift, and go to state 35
    RETURN      shift, and go to state 36
    IDENTIFIER  shift, and go to state 37

    $default  reduce using rule 13 (statements)

    statements  go to state 107
    statement   go to state 39
    vars        go to state 40
    ifs         go to state 41
    whiles      go to state 42
    dos         go to state 43
    read        go to state 44
    write       go to state 45
    continue    go to state 46
    return      go to state 47
    var         go to state 48


State 75

   22 vars: var ASSIGN . expression

    L_PAREN     shift, and go to state 70
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    expression     go to state 108
    mult_expr      go to state 62
    term           go to state 63
    positive_term  go to state 64
    var            go to state 65


State 76

   11 assign: ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER .

    $default  reduce using rule 11 (assign)


State 77

   38 relation_expr: NOT rexpr .

    $default  reduce using rule 38 (relation_expr)


State 78

   34 bool_expr: bool_expr . OR relation_and_expr
   42 rexpr: L_PAREN bool_expr . R_PAREN

    OR       shift, and go to state 84
    R_PAREN  shift, and go to state 109


State 79

   39 rexpr: expression . comp expression
   63 positive_term: L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 110
    LT       shift, and go to state 86
    LTE      shift, and go to state 87
    GT       shift, and go to state 88
    GTE      shift, and go to state 89
    EQ       shift, and go to state 90
    NEQ      shift, and go to state 91

    comp  go to state 92


State 80

   64 term_iden: L_PAREN . term_ex R_PAREN
   65          | L_PAREN . R_PAREN

    L_PAREN     shift, and go to state 70
    R_PAREN     shift, and go to state 111
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    expression     go to state 112
    mult_expr      go to state 62
    term           go to state 63
    positive_term  go to state 64
    term_ex        go to state 113
    var            go to state 65


State 81

   60 term: IDENTIFIER term_iden .

    $default  reduce using rule 60 (term)


State 82

   59 term: SUB positive_term .

    $default  reduce using rule 59 (term)


State 83

   23 ifs: IF bool_expr THEN . statements ENDIF
   24    | IF bool_expr THEN . statements ELSE statements ENDIF

    IF          shift, and go to state 30
    WHILE       shift, and go to state 31
    DO          shift, and go to state 32
    CONTINUE    shift, and go to state 33
    READ        shift, and go to state 34
    WRITE       shift, and go to state 35
    RETURN      shift, and go to state 36
    IDENTIFIER  shift, and go to state 37

    statements  go to state 114
    statement   go to state 39
    vars        go to state 40
    ifs         go to state 41
    whiles      go to state 42
    dos         go to state 43
    read        go to state 44
    write       go to state 45
    continue    go to state 46
    return      go to state 47
    var         go to state 48


State 84

   34 bool_expr: bool_expr OR . relation_and_expr

    NOT         shift, and go to state 50
    TRUE        shift, and go to state 51
    FALSE       shift, and go to state 52
    L_PAREN     shift, and go to state 53
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    relation_and_expr  go to state 115
    relation_expr      go to state 59
    rexpr              go to state 60
    expression         go to state 61
    mult_expr          go to state 62
    term               go to state 63
    positive_term      go to state 64
    var                go to state 65


State 85

   36 relation_and_expr: relation_and_expr AND . relation_expr

    NOT         shift, and go to state 50
    TRUE        shift, and go to state 51
    FALSE       shift, and go to state 52
    L_PAREN     shift, and go to state 53
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    relation_expr  go to state 116
    rexpr          go to state 60
    expression     go to state 61
    mult_expr      go to state 62
    term           go to state 63
    positive_term  go to state 64
    var            go to state 65


State 86

   45 comp: LT .

    $default  reduce using rule 45 (comp)


State 87

   47 comp: LTE .

    $default  reduce using rule 47 (comp)


State 88

   46 comp: GT .

    $default  reduce using rule 46 (comp)


State 89

   48 comp: GTE .

    $default  reduce using rule 48 (comp)


State 90

   43 comp: EQ .

    $default  reduce using rule 43 (comp)


State 91

   44 comp: NEQ .

    $default  reduce using rule 44 (comp)


State 92

   39 rexpr: expression comp . expression

    L_PAREN     shift, and go to state 70
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    expression     go to state 117
    mult_expr      go to state 62
    term           go to state 63
    positive_term  go to state 64
    var            go to state 65


State 93

   50 add_expr: ADD . mult_expr add_expr

    L_PAREN     shift, and go to state 70
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    mult_expr      go to state 118
    term           go to state 63
    positive_term  go to state 64
    var            go to state 65


State 94

   51 add_expr: SUB . mult_expr add_expr

    L_PAREN     shift, and go to state 70
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    mult_expr      go to state 119
    term           go to state 63
    positive_term  go to state 64
    var            go to state 65


State 95

   49 expression: mult_expr add_expr .

    $default  reduce using rule 49 (expression)


State 96

   54 multi_term: MULT . term multi_term

    L_PAREN     shift, and go to state 70
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    term           go to state 120
    positive_term  go to state 64
    var            go to state 65


State 97

   55 multi_term: DIV . term multi_term

    L_PAREN     shift, and go to state 70
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    term           go to state 121
    positive_term  go to state 64
    var            go to state 65


State 98

   56 multi_term: MOD . term multi_term

    L_PAREN     shift, and go to state 70
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    term           go to state 122
    positive_term  go to state 64
    var            go to state 65


State 99

   53 mult_expr: term multi_term .

    $default  reduce using rule 53 (mult_expr)


State 100

   25 whiles: WHILE bool_expr BEGINLOOP . statements ENDLOOP

    IF          shift, and go to state 30
    WHILE       shift, and go to state 31
    DO          shift, and go to state 32
    CONTINUE    shift, and go to state 33
    READ        shift, and go to state 34
    WRITE       shift, and go to state 35
    RETURN      shift, and go to state 36
    IDENTIFIER  shift, and go to state 37

    statements  go to state 123
    statement   go to state 39
    vars        go to state 40
    ifs         go to state 41
    whiles      go to state 42
    dos         go to state 43
    read        go to state 44
    write       go to state 45
    continue    go to state 46
    return      go to state 47
    var         go to state 48


State 101

   26 dos: DO BEGINLOOP statements . ENDLOOP WHILE bool_expr

    ENDLOOP  shift, and go to state 124


State 102

   30 empty: COMMA . var empty

    IDENTIFIER  shift, and go to state 37

    var  go to state 125


State 103

   27 read: READ var empty .

    $default  reduce using rule 27 (read)


State 104

   28 write: WRITE var empty .

    $default  reduce using rule 28 (write)


State 105

   63 positive_term: L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 110


State 106

   69 var: IDENTIFIER L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 126


State 107

   12 statements: statement SEMICOLON statements .

    $default  reduce using rule 12 (statements)


State 108

   22 vars: var ASSIGN expression .

    $default  reduce using rule 22 (vars)


State 109

   42 rexpr: L_PAREN bool_expr R_PAREN .

    $default  reduce using rule 42 (rexpr)


State 110

   63 positive_term: L_PAREN expression R_PAREN .

    $default  reduce using rule 63 (positive_term)


State 111

   65 term_iden: L_PAREN R_PAREN .

    $default  reduce using rule 65 (term_iden)


State 112

   66 term_ex: expression .
   67        | expression . COMMA term_ex

    COMMA  shift, and go to state 127

    $default  reduce using rule 66 (term_ex)


State 113

   64 term_iden: L_PAREN term_ex . R_PAREN

    R_PAREN  shift, and go to state 128


State 114

   23 ifs: IF bool_expr THEN statements . ENDIF
   24    | IF bool_expr THEN statements . ELSE statements ENDIF

    ENDIF  shift, and go to state 129
    ELSE   shift, and go to state 130


State 115

   34 bool_expr: bool_expr OR relation_and_expr .
   36 relation_and_expr: relation_and_expr . AND relation_expr

    AND  shift, and go to state 85

    $default  reduce using rule 34 (bool_expr)


State 116

   36 relation_and_expr: relation_and_expr AND relation_expr .

    $default  reduce using rule 36 (relation_and_expr)


State 117

   39 rexpr: expression comp expression .

    $default  reduce using rule 39 (rexpr)


State 118

   50 add_expr: ADD mult_expr . add_expr

    ADD  shift, and go to state 93
    SUB  shift, and go to state 94

    $default  reduce using rule 52 (add_expr)

    add_expr  go to state 131


State 119

   51 add_expr: SUB mult_expr . add_expr

    ADD  shift, and go to state 93
    SUB  shift, and go to state 94

    $default  reduce using rule 52 (add_expr)

    add_expr  go to state 132


State 120

   54 multi_term: MULT term . multi_term

    MULT  shift, and go to state 96
    DIV   shift, and go to state 97
    MOD   shift, and go to state 98

    $default  reduce using rule 57 (multi_term)

    multi_term  go to state 133


State 121

   55 multi_term: DIV term . multi_term

    MULT  shift, and go to state 96
    DIV   shift, and go to state 97
    MOD   shift, and go to state 98

    $default  reduce using rule 57 (multi_term)

    multi_term  go to state 134


State 122

   56 multi_term: MOD term . multi_term

    MULT  shift, and go to state 96
    DIV   shift, and go to state 97
    MOD   shift, and go to state 98

    $default  reduce using rule 57 (multi_term)

    multi_term  go to state 135


State 123

   25 whiles: WHILE bool_expr BEGINLOOP statements . ENDLOOP

    ENDLOOP  shift, and go to state 136


State 124

   26 dos: DO BEGINLOOP statements ENDLOOP . WHILE bool_expr

    WHILE  shift, and go to state 137


State 125

   30 empty: COMMA var . empty

    COMMA  shift, and go to state 102

    $default  reduce using rule 29 (empty)

    empty  go to state 138


State 126

   69 var: IDENTIFIER L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    $default  reduce using rule 69 (var)


State 127

   67 term_ex: expression COMMA . term_ex

    L_PAREN     shift, and go to state 70
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    expression     go to state 112
    mult_expr      go to state 62
    term           go to state 63
    positive_term  go to state 64
    term_ex        go to state 139
    var            go to state 65


State 128

   64 term_iden: L_PAREN term_ex R_PAREN .

    $default  reduce using rule 64 (term_iden)


State 129

   23 ifs: IF bool_expr THEN statements ENDIF .

    $default  reduce using rule 23 (ifs)


State 130

   24 ifs: IF bool_expr THEN statements ELSE . statements ENDIF

    IF          shift, and go to state 30
    WHILE       shift, and go to state 31
    DO          shift, and go to state 32
    CONTINUE    shift, and go to state 33
    READ        shift, and go to state 34
    WRITE       shift, and go to state 35
    RETURN      shift, and go to state 36
    IDENTIFIER  shift, and go to state 37

    statements  go to state 140
    statement   go to state 39
    vars        go to state 40
    ifs         go to state 41
    whiles      go to state 42
    dos         go to state 43
    read        go to state 44
    write       go to state 45
    continue    go to state 46
    return      go to state 47
    var         go to state 48


State 131

   50 add_expr: ADD mult_expr add_expr .

    $default  reduce using rule 50 (add_expr)


State 132

   51 add_expr: SUB mult_expr add_expr .

    $default  reduce using rule 51 (add_expr)


State 133

   54 multi_term: MULT term multi_term .

    $default  reduce using rule 54 (multi_term)


State 134

   55 multi_term: DIV term multi_term .

    $default  reduce using rule 55 (multi_term)


State 135

   56 multi_term: MOD term multi_term .

    $default  reduce using rule 56 (multi_term)


State 136

   25 whiles: WHILE bool_expr BEGINLOOP statements ENDLOOP .

    $default  reduce using rule 25 (whiles)


State 137

   26 dos: DO BEGINLOOP statements ENDLOOP WHILE . bool_expr

    NOT         shift, and go to state 50
    TRUE        shift, and go to state 51
    FALSE       shift, and go to state 52
    L_PAREN     shift, and go to state 53
    NUMBER      shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    SUB         shift, and go to state 56

    bool_expr          go to state 141
    relation_and_expr  go to state 58
    relation_expr      go to state 59
    rexpr              go to state 60
    expression         go to state 61
    mult_expr          go to state 62
    term               go to state 63
    positive_term      go to state 64
    var                go to state 65


State 138

   30 empty: COMMA var empty .

    $default  reduce using rule 30 (empty)


State 139

   67 term_ex: expression COMMA term_ex .

    $default  reduce using rule 67 (term_ex)


State 140

   24 ifs: IF bool_expr THEN statements ELSE statements . ENDIF

    ENDIF  shift, and go to state 142


State 141

   26 dos: DO BEGINLOOP statements ENDLOOP WHILE bool_expr .
   34 bool_expr: bool_expr . OR relation_and_expr

    OR  shift, and go to state 84

    $default  reduce using rule 26 (dos)


State 142

   24 ifs: IF bool_expr THEN statements ELSE statements ENDIF .

    $default  reduce using rule 24 (ifs)
